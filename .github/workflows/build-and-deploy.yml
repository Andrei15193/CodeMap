name: Build and Deploy

on:
  push:
    branches:
    - dev
    - add-basic-tooling

  release:
    types:
    - published

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate Package Info
      id: package_info
      if: false
      shell: pwsh
      run: |
        $codeMapDescription = (Select-Xml -Path ./CodeMap/CodeMap.csproj -XPath "//Project/PropertyGroup/Description/text()").Node.Data.Trim() -replace '\r?\n\r?','%0A'
        $codeMapReleaseNotes = (Select-Xml -Path ./CodeMap/CodeMap.csproj -XPath "//Project/PropertyGroup/PackageReleaseNotes/text()").Node.Data.Trim() -replace '\r?\n\r?','%0A'
        Write-Host "::set-output name=package_version::$packageVersion"
        Write-Host "::set-output name=assembly_version::$assemblyVersion"
        Write-Host "::set-output name=codemap_package_description::$codeMapDescription"
        Write-Host "::set-output name=codemap_package_release_notes::$codeMapReleaseNotes"
        [Convert]::FromBase64String("${{ secrets.KeyFile }}") | Set-Content ./CodeMap.snk -AsByteStream

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x

    - name: Restore
      run: dotnet restore

    - name: Build
      shell: pwsh
      run: |
        switch ('${{ github.event_name }}')
        {
          'push' {
            dotnet build `
              --configuration Release `
              --no-restore
          }

          'release' {
            [Convert]::FromBase64String('${{ secrets.KeyFile }}') `
            | Set-Content ./CodeMap.snk -AsByteStream

            dotnet build `
              --configuration Release `
              --no-restore `
              -property:Version='${{ github.ref_name }}' `
              -property:SignAssembly=True `
              -property:AssemblyOriginatorKeyFile=../CodeMap.snk `
              -property:DisableStrongNamer=False
          }
        }

    - name: Test
      shell: pwsh
      run: |
        dotnet test `
          --configuration Release `
          --no-build `
          --verbosity normal

    - name: Pack
      if: github.event_name == 'release'
      shell: pwsh
      run: |
        dotnet pack `
          --configuration Release `
          --output publish `
          --no-build `
          -property:PackageVersion='${{ github.ref_name }}' `
          -property:RepositoryCommit='${{ github.sha }}'

    - name: Upload CodeMap NuGet Package to Release
      uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./publish/CodeMap.${{ github.ref_name }}.nupkg
        asset_name: CodeMap.${{ github.ref_name }}.nupkg
        asset_content_type: application/zip

    - name: Generate Project Site
      shell: pwsh
      run: |
        dotnet run --project CodeMap.Documentation --no-build -- -OutputFilePath './docs/${{ github.ref_name }}/index.html'
        # Set-Content -Path "./docs/_data/versions.yml" -Encoding utf8

    - name: Publish Project Site
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: docs
        enable_jekyll: true
        keep_files: true
